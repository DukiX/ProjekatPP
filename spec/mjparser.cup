package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID, READ, MINUS, MUL, DIV, MOD, NEW, LSQUARE, RSQUARE, DOT, FOR, BREAK, CONTINUE, AND, OR, CONST,TRUE, FALSE, ENUM;
terminal EQ, NE, GT, LT, GE, LE;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal IF, ELSE;
terminal INCREMENT, DECREMENT;
terminal char CHARCONST;

nonterminal MethodDeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDeclr, MethodTypeN ,EnumName, DesignatorOptions; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, FactorList,VarDeclList,BoolConst, VarDeclaration, ConstDef, ActualParamList, VarList; 

nonterminal DesignatorStatement;
nonterminal Mulop;
nonterminal FactorTypeExpr;
nonterminal ForDesignator, ForCondition, Condition, CondTermList, CondTerm, CondFactList, CondFact;
nonterminal Relop;
nonterminal For;
nonterminal EnumNumbering;
nonterminal EnumList;
nonterminal Endif;
nonterminal Begelse;
nonterminal Endelse;
nonterminal Ifif;
nonterminal Begif;

Program ::= (Program) PROG ProgName:p VarDeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;


VarDeclList ::= (VarDeclarations) VarDeclList VarDeclaration  
				|
				(NoVarDecl)/* epsilon */ 
				|
				(ErrVarDecl) error
			  	{: parser.log.debug("Uspesan oporavak od definicije promenljive."); :}
				;
				
VarDeclaration ::= (VarDecl) Type:varType IDENT:varName VarList:l SEMI 
				|
				(VarDeclArray) Type:varType IDENT:arrayName LSQUARE RSQUARE SEMI 
				|
				(ConstDecl) CONST Type:constType IDENT:constName EQUAL ConstDef:cd SEMI
				|
				(EnumDecl) ENUM EnumName:e LBRACE EnumList RBRACE
				;

VarList ::= (VarListY) VarList COMMA IDENT:varName
			|
			(VarListN) /*epsilon*/
			;

EnumName ::= (EnumName) IDENT:EnumNme;
				
EnumList ::= (EnumLst) EnumList COMMA IDENT:name EnumNumbering
			|
			(EnumElem) IDENT:name EnumNumbering
			;
			
EnumNumbering ::= (EnumNmbr) EQUAL NUMBER
				|
				(EnumNoNmbr) /* epsilon */
				;

ConstDef ::= (ConstDefNum) NUMBER
			|
			(CharConstDef) CHARCONST
			|
			(FactorBoolDef) BoolConst
			;


Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDeclr
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDeclr ::= (MethodDecl) MethodTypeN
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   |
			   (ErrMethDecl) error
			  	{: parser.log.debug("Nepoznata format deklaracije metode. Oporavak od greske"); :}
			   ;

MethodTypeN ::= (MethodTypeName) Type:retType IDENT:methName
				|
				(MethodTypeVoid) VOID IDENT:methName
				;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					|
					(ErrFormPar) error
			  		{: parser.log.debug("Uspesan oporavak od formalnog parametra."); :}
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:formalType IDENT:formalName;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched | (UnmachedStmt) Unmatched;

Unmatched ::= (UnmatchedIf) Ifif LPAREN Condition RPAREN Begif Statement Endif | (UnmatchedIfElse) Ifif LPAREN Condition RPAREN Begif Matched ELSE Begelse Unmatched Endelse;

Endif ::= (Endif) /* epsilon */;
	
				  
Matched ::=	(ErrAssignment) error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:ex RPAREN SEMI 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  | 
			  (MatchedIf) Ifif LPAREN Condition RPAREN Begif Matched ELSE Begelse Matched Endelse
			  |
			  (MatchedDesignatorStatement) DesignatorStatement SEMI	
			  |
			  (MatchedRead) READ LPAREN Designator:d RPAREN SEMI
			  |
			  (PrintStmtTwo) PRINT LPAREN Expr:ex COMMA NUMBER:num RPAREN SEMI
			  |
			  (MatchedBraces)LBRACE Statement StatementList RBRACE
			  |
			  (MatchedContinue) CONTINUE SEMI
			  |
			  (MatchedBreak) BREAK SEMI
			  |
			  (MatchedFor) For LPAREN ForDesignator SEMI ForCondition SEMI ForDesignator RPAREN Matched
			  ;
			  
Ifif ::= (Ifif) IF;

Begif ::= (Begif) /* epsilon */;

Begelse ::= (Begelse) /* epsilon */;

Endelse ::= (Endelse) /* epsilon */;
			
For ::= (ForFor) FOR;

ForDesignator ::= (ForDesign) DesignatorStatement
			|
			/*epsilon*/
			;

ForCondition ::= (ForCond) Condition
			|
			/*epsilon*/
			;
			
Condition ::= (Condit) CondTerm CondTermList			
				|
				(ConditError) error
				{: parser.log.debug("Uspesan oporavak od if greske."); :}
				;

CondTermList ::= (CondTerms) CondTermList OR CondTerm
				|
				/*epsilon*/
				;
				
CondTerm ::= (CondT) CondFact CondFactList
				;
				
CondFactList ::= (CondFacts) CondFactList AND CondFact:cf
				|
				/*epsilon*/
				;

CondFact ::= (CndFct) Expr
			|
			(CndFctNotBool) Expr:e1 Relop:r Expr:e2
			;

			  
DesignatorStatement ::= (ProcCall) Designator:func LPAREN ActualPars RPAREN
			  |
			  (Assignment) Designator:dest EQUAL Expr:e
			  |
			  (Increment) Designator:d INCREMENT
			  |
			  (Decrement) Designator:d DECREMENT
			  ;
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 |
		 (MinusTerm) MINUS Term:t
		 ;

Term ::= (Term) Factor FactorList:t;

FactorList ::= (MulopFactor) FactorList:fl Mulop Factor:f
			|
			(NoFactor) /* epsilon */
			;

Factor ::= (Const) NUMBER
			|
			(CharConst) CHARCONST:c
			|
			(FactorExpr) LPAREN Expr RPAREN
			|
			(FactorBool) BoolConst:bc
			|
			(FactorNew) NEW Type:t
			|
			(FactorNewArr) NEW Type:t LSQUARE Expr:e RSQUARE
			|
		   (Var) Designator:d
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;
		   
BoolConst ::= (BoolTrue) TRUE
				|
				(BoolFalse) FALSE
				;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr:e
					|
					(ActualParam) Expr:e
					;

Designator ::= (Designator) IDENT:name DesignatorOptions:desopt
			;
			
DesignatorOptions ::=(DotDesignatorOption) DOT IDENT:idnam
					|
					(SquareDesignatorOption) LSQUARE Expr:ex RSQUARE
					|
					(NoDesignatorOptions) /* epsilon */
					;

Addop ::= (Plusop) PLUS 
			|
			(Minop) MINUS
			;
		
Mulop ::= (Timesop) MUL
			|
			(Divop) DIV
			|
			(Modop) MOD
			;
			
Relop ::= 	(Releq) EQ
			|
			(Relne) NE
			|
			(Relgt) GT
			|
			(Rellt) LT
			|
			(Relge) GE
			|
			(Relle) LE
;