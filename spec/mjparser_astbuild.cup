package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID, READ, MINUS, MUL, DIV, MOD, NEW, LSQUARE, RSQUARE, DOT, FOR, BREAK, CONTINUE, AND, OR, CONST,TRUE, FALSE, ENUM;
terminal EQ, NE, GT, LT, GE, LE;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal IF, ELSE;
terminal INCREMENT, DECREMENT;
terminal char CHARCONST;

nonterminal MethodDeclList MethodDeclList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDeclr, MethodTypeN ,EnumName, DesignatorOptions; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, FactorList,VarDeclList,BoolConst, VarDeclaration, ConstDef, ActualParamList, VarList,EnumNumbering; 

nonterminal DesignatorStatement DesignatorStatement;
nonterminal Mulop Mulop;
nonterminal FactorTypeExpr FactorTypeExpr;
nonterminal ForDesignator ForDesignator;
nonterminal ForCondition ForCondition;
nonterminal Condition Condition;
nonterminal CondTermList CondTermList;
nonterminal CondTerm CondTerm;
nonterminal CondFactList CondFactList;
nonterminal CondFact CondFact;
nonterminal Relop Relop;
nonterminal For For;
nonterminal EnumList EnumList;
nonterminal Endif Endif;
nonterminal Begelse Begelse;
nonterminal Endelse Endelse;
nonterminal Ifif Ifif;
nonterminal Begif Begif;
nonterminal Andbegadr Andbegadr;
nonterminal Begfor Begfor;
nonterminal Endfor Endfor;
nonterminal Beginc Beginc;
nonterminal Endinc Endinc;
nonterminal BegForCond BegForCond;
nonterminal ConstList ConstList;
nonterminal BoolConstDef BoolConstDef;
nonterminal ArrayOpt ArrayOpt;
nonterminal ArrayForPar ArrayForPar;
nonterminal Rd Rd;

Program ::= (Program) PROG ProgName:p VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, V1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;


VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDeclaration:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */ 
				|
				(ErrVarDecl) error
			  	{: parser.log.debug("Uspesan oporavak od definicije promenljive."); :} {: RESULT=new ErrVarDecl(); :}
				;
				
VarDeclaration ::= (VarDecl) Type:varType IDENT:varName ArrayOpt:A1 VarList:l SEMI {: RESULT=new VarDecl(varType, varName, A1, l); RESULT.setLine(varTypeleft); :} 
				|
				(ConstDecl) CONST Type:constType IDENT:constName EQUAL ConstDef:cd ConstList:cl SEMI {: RESULT=new ConstDecl(constType, constName, cd, cl); RESULT.setLine(constTypeleft); :}
				|
				(EnumDecl) ENUM EnumName:e LBRACE EnumList:E1 RBRACE {: RESULT=new EnumDecl(e, E1); RESULT.setLine(eleft); :}
				;

VarList ::= (VarListY) VarList:V1 COMMA IDENT:varName ArrayOpt:A2 {: RESULT=new VarListY(V1, varName, A2); RESULT.setLine(V1left); :}
			|
			(VarListN) {: RESULT=new VarListN(); :} /*epsilon*/
			;
			
ArrayOpt ::= (ArrayOptY) LSQUARE RSQUARE {: RESULT=new ArrayOptY(); :}
			|
			(ArrayOptN) {: RESULT=new ArrayOptN(); :} /*epsilon*/
			;
			
ConstList ::= (CnstList) ConstList:C1 COMMA IDENT:constName EQUAL ConstDef:cd {: RESULT=new CnstList(C1, constName, cd); RESULT.setLine(C1left); :}
			|
			(CnstListEmpty) {: RESULT=new CnstListEmpty(); :} /*epsilon*/
			;

EnumName ::= (EnumName) IDENT:EnumNme {: RESULT=new EnumName(EnumNme); RESULT.setLine(EnumNmeleft); :};
				
EnumList ::= (EnumLst) EnumList:E1 COMMA IDENT:name EnumNumbering:E2 {: RESULT=new EnumLst(E1, name, E2); RESULT.setLine(E1left); :}
			|
			(EnumElem) IDENT:name EnumNumbering:E1 {: RESULT=new EnumElem(name, E1); RESULT.setLine(nameleft); :}
			;
			
EnumNumbering ::= (EnumNmbr) EQUAL NUMBER:N1 {: RESULT=new EnumNmbr(N1); RESULT.setLine(N1left); :}
				|
				(EnumNoNmbr) {: RESULT=new EnumNoNmbr(); :} /* epsilon */
				;

ConstDef ::= (ConstDefNum) NUMBER:N1 {: RESULT=new ConstDefNum(N1); RESULT.setLine(N1left); :}
			|
			(CharConstDef) CHARCONST:C1 {: RESULT=new CharConstDef(C1); RESULT.setLine(C1left); :}
			|
			(FactorBoolDef) BoolConstDef:B1 {: RESULT=new FactorBoolDef(B1); RESULT.setLine(B1left); :}
			;
			
BoolConstDef ::= (BoolTrueDef) TRUE {: RESULT=new BoolTrueDef(); :}
				|
				(BoolFalseDef) FALSE {: RESULT=new BoolFalseDef(); :}
				;


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDeclr:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;

MethodDeclr ::= (MethodDecl) MethodTypeN:M1
			   LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   |
			   (ErrMethDecl) error
			  	{: parser.log.debug("Nepoznata format deklaracije metode. Oporavak od greske"); :} {: RESULT=new ErrMethDecl(); :}
			   ;

MethodTypeN ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
				|
				(MethodTypeVoid) VOID IDENT:methName {: RESULT=new MethodTypeVoid(methName); RESULT.setLine(methNameleft); :}
				;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} | (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					|
					(ErrFormPar) error
			  		{: parser.log.debug("Uspesan oporavak od greske kod deklaracije formalnog parametra."); :} {: RESULT=new ErrFormPar(); :}
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:formalType IDENT:formalName ArrayForPar:A1 {: RESULT=new FormalParamDecl(formalType, formalName, A1); RESULT.setLine(formalTypeleft); :};

ArrayForPar ::= (ArrayForParY) LSQUARE RSQUARE {: RESULT=new ArrayForParY(); :}
				|
				(ArrayForParN) {: RESULT=new ArrayForParN(); :} /* epsilon */
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :} | (UnmachedStmt) Unmatched:U1 {: RESULT=new UnmachedStmt(U1); RESULT.setLine(U1left); :};

Unmatched ::= (UnmatchedIf) Ifif:I1 LPAREN Condition:C2 RPAREN Begif:B3 Statement:S4 Endif:E5 {: RESULT=new UnmatchedIf(I1, C2, B3, S4, E5); RESULT.setLine(I1left); :} | (UnmatchedIfElse) Ifif:I1 LPAREN Condition:C2 RPAREN Begif:B3 Matched:M4 ELSE Begelse:B5 Unmatched:U6 Endelse:E7 {: RESULT=new UnmatchedIfElse(I1, C2, B3, M4, B5, U6, E7); RESULT.setLine(I1left); :};

Endif ::= (Endif) {: RESULT=new Endif(); :} /* epsilon */;
	
				  
Matched ::=	(ErrAssignment) error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :} {: RESULT=new ErrAssignment(); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:ex RPAREN SEMI {: RESULT=new PrintStmt(ex); RESULT.setLine(exleft); :} 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			  | 
			  (MatchedIf) Ifif:I1 LPAREN Condition:C2 RPAREN Begif:B3 Matched:M4 ELSE Begelse:B5 Matched:M6 Endelse:E7 {: RESULT=new MatchedIf(I1, C2, B3, M4, B5, M6, E7); RESULT.setLine(I1left); :}
			  |
			  (MatchedDesignatorStatement) DesignatorStatement:D1 SEMI {: RESULT=new MatchedDesignatorStatement(D1); RESULT.setLine(D1left); :}	
			  |
			  (MatchedRead) Rd:R1 LPAREN Designator:d RPAREN SEMI {: RESULT=new MatchedRead(R1, d); RESULT.setLine(R1left); :}
			  |
			  (PrintStmtTwo) PRINT LPAREN Expr:ex COMMA NUMBER:num RPAREN SEMI {: RESULT=new PrintStmtTwo(ex, num); RESULT.setLine(exleft); :}
			  |
			  (MatchedBraces)LBRACE Statement:S1 StatementList:S2 RBRACE {: RESULT=new MatchedBraces(S1, S2); RESULT.setLine(S1left); :}
			  |
			  (MatchedContinue) CONTINUE SEMI {: RESULT=new MatchedContinue(); :}
			  |
			  (MatchedBreak) BREAK SEMI {: RESULT=new MatchedBreak(); :}
			  |
			  (MatchedFor) For:F1 LPAREN ForDesignator:F2 SEMI BegForCond:B3 ForCondition:F4 SEMI Beginc:B5 ForDesignator:F6 Endinc:E7 RPAREN Begfor:B8 Matched:M9 Endfor:E10 {: RESULT=new MatchedFor(F1, F2, B3, F4, B5, F6, E7, B8, M9, E10); RESULT.setLine(F1left); :}
			  ;
			  
Rd ::= (Rd) READ {: RESULT=new Rd(); :};
			  
Ifif ::= (Ifif) IF {: RESULT=new Ifif(); :};

Begif ::= (Begif) {: RESULT=new Begif(); :} /* epsilon */;

Beginc ::= (Beginc) {: RESULT=new Beginc(); :} /* epsilon */;

BegForCond ::= (BegForCond) {: RESULT=new BegForCond(); :} /* epsilon */;

Endinc ::= (Endinc) {: RESULT=new Endinc(); :} /* epsilon */;

Begfor ::= (Begfor) {: RESULT=new Begfor(); :} /* epsilon */;

Endfor ::= (Endfor) {: RESULT=new Endfor(); :} /* epsilon */;

Begelse ::= (Begelse) {: RESULT=new Begelse(); :} /* epsilon */;

Endelse ::= (Endelse) {: RESULT=new Endelse(); :} /* epsilon */;
			
For ::= (ForFor) FOR {: RESULT=new ForFor(); :};

ForDesignator ::= (ForDesign) DesignatorStatement:D1 {: RESULT=new ForDesign(D1); RESULT.setLine(D1left); :}
			| {: RESULT=new ForDesignatorDerived1(); :}
			/*epsilon*/
			;

ForCondition ::= (ForCond) Condition:C1 {: RESULT=new ForCond(C1); RESULT.setLine(C1left); :}
			|
			(EmptyForCond) {: RESULT=new EmptyForCond(); :} /*epsilon*/
			;
			
Condition ::= (Condit) CondTerm:C1 CondTermList:C2 {: RESULT=new Condit(C1, C2); RESULT.setLine(C1left); :}			
				|
				(ConditError) error
				{: parser.log.debug("Uspesan oporavak od if greske."); :} {: RESULT=new ConditError(); :}
				;

CondTermList ::= (CondTerms) CondTermList:C1 OR Andbegadr:A2 CondTerm:C3 {: RESULT=new CondTerms(C1, A2, C3); RESULT.setLine(C1left); :}
				| {: RESULT=new CondTermListDerived1(); :}
				/*epsilon*/
				;

Andbegadr ::= (Andbegadr) {: RESULT=new Andbegadr(); :} /* epsilon */;

CondTerm ::= (CondT) CondFact:C1 CondFactList:C2 {: RESULT=new CondT(C1, C2); RESULT.setLine(C1left); :}
				;
				
CondFactList ::= (CondFacts) CondFactList:C1 AND CondFact:cf {: RESULT=new CondFacts(C1, cf); RESULT.setLine(C1left); :}
				| {: RESULT=new CondFactListDerived1(); :}
				/*epsilon*/
				;

CondFact ::= (CndFct) Expr:E1 {: RESULT=new CndFct(E1); RESULT.setLine(E1left); :}
			|
			(CndFctNotBool) Expr:e1 Relop:r Expr:e2 {: RESULT=new CndFctNotBool(e1, r, e2); RESULT.setLine(e1left); :}
			;

			  
DesignatorStatement ::= (ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
			  |
			  (Assignment) Designator:dest EQUAL Expr:e {: RESULT=new Assignment(dest, e); RESULT.setLine(destleft); :}
			  |
			  (Increment) Designator:d INCREMENT {: RESULT=new Increment(d); RESULT.setLine(dleft); :}
			  |
			  (Decrement) Designator:d DECREMENT {: RESULT=new Decrement(d); RESULT.setLine(dleft); :}
			  ;
			  
Expr ::= (AddExpr) Expr:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 |
		 (MinusTerm) MINUS Term:t {: RESULT=new MinusTerm(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (Term) Factor:F1 FactorList:t {: RESULT=new Term(F1, t); RESULT.setLine(F1left); :};

FactorList ::= (MulopFactor) FactorList:fl Mulop:M1 Factor:f {: RESULT=new MulopFactor(fl, M1, f); RESULT.setLine(flleft); :}
			|
			(NoFactor) {: RESULT=new NoFactor(); :} /* epsilon */
			;

Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
			|
			(CharConst) CHARCONST:c {: RESULT=new CharConst(c); RESULT.setLine(cleft); :}
			|
			(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
			|
			(FactorBool) BoolConst:bc {: RESULT=new FactorBool(bc); RESULT.setLine(bcleft); :}
			|
			(FactorNew) NEW Type:t {: RESULT=new FactorNew(t); RESULT.setLine(tleft); :}
			|
			(FactorNewArr) NEW Type:t LSQUARE Expr:e RSQUARE {: RESULT=new FactorNewArr(t, e); RESULT.setLine(tleft); :}
			|
		   (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		    |
		   (FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		   ;
		   
BoolConst ::= (BoolTrue) TRUE {: RESULT=new BoolTrue(); :}
				|
				(BoolFalse) FALSE {: RESULT=new BoolFalse(); :}
				;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:e {: RESULT=new ActualParams(A1, e); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:e {: RESULT=new ActualParam(e); RESULT.setLine(eleft); :}
					;

Designator ::= (Designator) IDENT:name DesignatorOptions:desopt {: RESULT=new Designator(name, desopt); RESULT.setLine(nameleft); :}
			;
			
DesignatorOptions ::=(DotDesignatorOption) DOT IDENT:idnam {: RESULT=new DotDesignatorOption(idnam); RESULT.setLine(idnamleft); :}
					|
					(SquareDesignatorOption) LSQUARE Expr:ex RSQUARE {: RESULT=new SquareDesignatorOption(ex); RESULT.setLine(exleft); :}
					|
					(NoDesignatorOptions) {: RESULT=new NoDesignatorOptions(); :} /* epsilon */
					;

Addop ::= (Plusop) PLUS {: RESULT=new Plusop(); :} 
			|
			(Minop) MINUS {: RESULT=new Minop(); :}
			;
		
Mulop ::= (Timesop) MUL {: RESULT=new Timesop(); :}
			|
			(Divop) DIV {: RESULT=new Divop(); :}
			|
			(Modop) MOD {: RESULT=new Modop(); :}
			;
			
Relop ::= 	(Releq) EQ {: RESULT=new Releq(); :}
			|
			(Relne) NE {: RESULT=new Relne(); :}
			|
			(Relgt) GT {: RESULT=new Relgt(); :}
			|
			(Rellt) LT {: RESULT=new Rellt(); :}
			|
			(Relge) GE {: RESULT=new Relge(); :}
			|
			(Relle) LE {: RESULT=new Relle(); :}
;